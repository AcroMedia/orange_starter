<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\Core\Template\Attribute;
use Drupal\image\Entity\ImageStyle;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Core\Entity\EntityManagerInterface;
use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
use Drupal\Core\Entity\EntityTypeManager;
use Drupal\comment\Entity\Comment;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Adds template suggestions.
 */
function orange_starter_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  if ($node = \Drupal::request()->attributes->get('node')) {
    array_splice($suggestions, 1, 0, 'page__type__' . $node->getType());
  }

  // Add taxonomy vocabulary suggestions.
  if ($term = \Drupal::request()->attributes->get('taxonomy_term')) {
    $vocabulary_id = $term->getVocabularyId();
    array_splice($suggestions, 1, 0, 'page__taxonomy__' . $term->getVocabularyId());
  }

  // Add page path alias suggestions.
  $page_current_path = \Drupal::service('path.current')->getPath();

  if (!empty($page_current_path)) {
    $page_current_alias = \Drupal::service('path.alias_manager')->getAliasByPath($page_current_path);
  }
  if (!empty($page_current_alias)) {
    $search_for = '/';
    $page_current_alias = str_replace('-', '_', $page_current_alias);
    $pos_page_current_alias = strpos($page_current_alias, $search_for);

    if ($pos_page_current_alias !== FALSE) {
      $page_current_alias_formatted = substr_replace($page_current_alias, '', $pos_page_current_alias, strlen($search_for));
      $page_current_alias_formatted = str_replace('/', '__', $page_current_alias_formatted);
    }
    if ($page_current_alias_formatted) {
      array_splice($suggestions, 1, 0, 'page__' . $page_current_alias_formatted);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Add body classes if certain regions have content.
 */
function orange_starter_preprocess_html(&$variables) {
  // Page title variable.
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
  if ($title && is_string($title)) {
    $variables['page_title'] = $title;
  }

  // Current path variable.
  $current_path = \Drupal::service('path.current')->getPath();
  $variables['current_path'] = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

  // Taxonomy term variables.
  if ($term = \Drupal::request()->attributes->get('taxonomy_term')) {
    // Set variable for taxonomy term's vocabulary.
    $variables['term_vocabulary'] = $term->getVocabularyId();

    // Set variable for taxonomy term's name.
    $variables['term_name'] = $term->getName();
  }
}

/**
 * Implements hook__preprocess_comment_HOOK() for Comments.
 */
function orange_starter_preprocess_comment(&$variables) {
  if (isset($variables['elements']['#comment'])) {
    $comment = $variables['elements']['#comment'];

    $variables['comment_type'] = $comment->bundle();

    $variables['created'] = t('@comment_date', [
      '@comment_date' => \Drupal::service('date.formatter')->format($comment->getCreatedTime(), 'custom', 'F j, Y')
    ]);
  }
}

/**
 * Implements hook_preprocess_node(&$variables).
 */
function orange_starter_preprocess_node(&$variables) {
  if (isset($variables['node'])) {
    $node = $variables['node'];

    // Base path variable.
    $variables['base_path'] = base_path();

    // Absolute path variable.
    $node_absolute_url = Url::fromRoute('entity.node.canonical', ['node' => $node->id()], ['absolute' => TRUE])->toString();
    $variables['absolute_path'] = $node_absolute_url;

    // Encoded fields for social media sharing.
    $node_absolute_encoded_url = urlencode($node_absolute_url);
    $variables['absolute_encoded_path'] = $node_absolute_encoded_url;

    $encoded_title = rawurlencode($node->title->value);
    $variables['encoded_title'] = $encoded_title;
  }
}

/**
 * Implements hook_preprocess_page(&$variables).
 */
function orange_starter_preprocess_page(&$variables) {
  // Load the site name out of configuration.
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');
}

/**
 * Implements hook_preprocess_taxonomy_term(&$variables).
 */
function orange_starter_preprocess_taxonomy_term(&$variables) {
  if (isset($variables['term'])) {
    $term = $variables['term'];

    // Set base path variable since it's not available by default.
    $variables['base_path'] = base_path();
  }
}

/**
 * Implements hook_form_alter().
 */
function orange_starter_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Comment form.
  if ($form_id == 'comment_node_comment_form') {
    // Update submit button text.
    $form['actions']['submit']['#value'] = t('Post Comment');
  }

  // User Login form.
  if ($form_id == 'user_login_form') {
    // Make checkout button the primary button.
    $form['actions']['submit']['#button_type'] = 'primary';

    // Remove autofocus from username input.
    unset($form['name']['#attributes']['autofocus']);
  }

  // User Reset Password form.
  if ($form_id == 'user_pass') {
    // Make checkout button the primary button.
    $form['actions']['submit']['#button_type'] = 'primary';

    // Remove mail which was markup.
    // And assign new text to the name field description instead.
    $form['mail'] = [];
    $form['name']['#description'] = t('Password reset instructions will be sent to your registered email address.');

    // Remove autofocus from username input.
    unset($form['name']['#attributes']['autofocus']);
  }
}

/**
 * Implements hook_preprocess_input(&$variables).
 */
function orange_starter_preprocess_input(&$variables) {
  if (isset($variables['element'])) {
    if (isset($variables['element']['#type'])) {
      $variables['type'] = $variables['element']['#type'];
    }
    if (isset($variables['element']['#button_type'])) {
      $variables['button_type'] = $variables['element']['#button_type'];
    }
  }
}

/**
 * Implements hook_preprocess_swiftmailer(&$variables).
 */
function orange_starter_preprocess_swiftmailer(&$variables) {
  // Load the site name out of configuration.
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');

  $variables['base_path'] = base_path();
  $variables['site_path'] = Url::fromRoute('<front>', [], ['absolute' => TRUE])->toString();
}
