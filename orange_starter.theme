<?php
/**
 * @file
 * Functions to support theming.
 */

use Drupal\Core\Template\Attribute;
use Drupal\Component\Utility\Xss;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Adds template suggestions.
 */
function orange_starter_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions
  if ($node = \Drupal::request()->attributes->get('node')) {
    array_splice($suggestions, 1, 0, 'page__type__' . $node->getType());
  }

  // Add Taxonomy Vocabulary suggestions
  if ($term = \Drupal::request()->attributes->get('taxonomy_term')) {
    $vocabulary_id = $term->getVocabularyId();
    array_splice($suggestions, 1, 0, 'page__taxonomy__' . $term->getVocabularyId());
  }

  // Add Page title suggestions
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

  if (!is_array($title)) {
    $title_format = strtolower(urlencode($title));
    $title_format = str_replace('+','_',$title_format);

    array_splice($suggestions, 1, 0, 'page__' . $title_format);
  }
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Add body classes if certain regions have content.
 */
function orange_starter_preprocess_html(&$variables) {
  // Add Page title class
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

  $variables['attributes']['class'][] = 'page-title-' . strtolower(urlencode($title));

  // Add information about the number of sidebars
  if (!empty($variables['page']['page_sidebar'])) {
    $variables['attributes']['class'][] = 'layout-two-column';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebar';
  }
}

/**
 * Implements hook__preprocess_comment_HOOK() for Comments.
 */
function orange_starter_preprocess_comment(&$variables) {
  $comment = $variables['elements']['#comment'];
  $variables['created'] = format_date($comment->getCreatedTime(), 'custom', 'F j, Y') . ' ' . t('at') . ' ' . format_date($comment->getCreatedTime(), 'custom', 'g:i a');
}

/**
* Implements hook_preprocess_node(&$variables).
*/
function orange_starter_preprocess_node(&$variables) {
 // Homepage Carousel
 if ($variables['node']->getType() === 'homepage_carousel') {
   $variables['carousel_title'] = $variables['node']->field_carousel_caption_title->value;
   $variables['carousel_text'] = $variables['node']->field_carousel_caption_text->value;
   $variables['carousel_image'] = $variables['node']->field_carousel_image->entity->url();
   $variables['carousel_image_alt'] = $variables['node']->field_carousel_image->alt;
   $variables['carousel_link'] = $variables['node']->field_carousel_link->uri;
   $variables['carousel_btn_text'] = $variables['node']->field_carousel_link->title;
 }

  // Image Gallery
  if ($variables['node']->getType() === 'image_gallery') {
    //$variables['gallery_body'] = Xss::filter($variables['node']->field_gallery_body->value);
    //$variables['gallery_body'] = $variables['node']->field_gallery_body->value;
    $variables['gallery_image'] = $variables['node']->field_gallery_image->entity->url();
    $variables['gallery_image_alt'] = $variables['node']->field_gallery_image->alt;
    $variables['gallery_image_caption'] = $variables['node']->field_gallery_image->title;
  }

  // Contact Information - Google Map
  if ($variables['node']->getType() === 'contact_information') {
    $variables['google_map_embed_code'] = Xss::filter($variables['node']->google_map_embed_code->value);
  }
}