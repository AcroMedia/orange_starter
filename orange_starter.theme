<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\Core\Template\Attribute;
use Drupal\image\Entity\ImageStyle;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Core\Entity\EntityManagerInterface;
use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
use Drupal\Core\Entity\EntityTypeManager;
use Drupal\comment\Entity\Comment;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Component\Utility\Xss;
use Drupal\Component\Utility\UrlHelper;
use Drupal\file\Entity\File;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_form_system_theme_settings_alter().
 *
 * Theme settings.
 */
function orange_starter_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes.
  // See issue https://www.drupal.org/project/drupal/issues/943212.
  if (isset($form_id)) {
    return;
  }

  // Site Configuration.
  $form['site_config'] = [
    '#type' => 'details',
    '#title' => t('Site Configuration'),
    '#open' => TRUE,
  ];
  $form['site_config']['site_logo'] = [
    '#type' => 'managed_file',
    '#title' => t('Site Logo'),
    '#default_value' => theme_get_setting('site_logo'),
    '#description' => t('The logo displayed on the maintenance page and email footer. Does not affect the site header/footer logo as that is hardcoded within the theme based on the site design.<br>Recommended size: 300px width or larger. It will be scaled down by the site.<br>Allowed types: png gif jpg jpeg.'),
    '#upload_location' => 'public://',
    '#upload_validators' => [
      'file_validate_extensions' => ['png gif jpg jpeg'],
    ],
  ];
  $form['site_config']['copyright_name'] = [
    '#type' => 'textfield',
    '#title' => t('Copyright Name'),
    '#description' => t('The name displayed in the copyright text (site and emails). If empty, the site name will be used instead.'),
    '#default_value' => theme_get_setting('copyright_name'),
  ];

  // Social Media Links.
  $form['social_media'] = [
    '#type' => 'details',
    '#title' => t('Social Media Links'),
    '#description' => t('Social media links that are displayed on the site and in the footer of emails that the site sends out.'),
    '#open' => TRUE,
  ];
  $form['social_media']['facebook_url'] = [
    '#type' => 'textfield',
    '#title' => t('Facebook URL'),
    '#default_value' => theme_get_setting('facebook_url'),
  ];
  $form['social_media']['twitter_url'] = [
    '#type' => 'textfield',
    '#title' => t('Twitter URL'),
    '#default_value' => theme_get_setting('twitter_url'),
  ];
  $form['social_media']['instagram_url'] = [
    '#type' => 'textfield',
    '#title' => t('Instagram URL'),
    '#default_value' => theme_get_setting('instagram_url'),
  ];
  $form['social_media']['youtube_url'] = [
    '#type' => 'textfield',
    '#title' => t('YouTube URL'),
    '#default_value' => theme_get_setting('youtube_url'),
  ];
  $form['social_media']['linkedin_url'] = [
    '#type' => 'textfield',
    '#title' => t('LinkedIn URL'),
    '#default_value' => theme_get_setting('linkedin_url'),
  ];
  $form['social_media']['pinterest_url'] = [
    '#type' => 'textfield',
    '#title' => t('Pinterest URL'),
    '#default_value' => theme_get_setting('pinterest_url'),
  ];

  // Email Configuration.
  $form['email_config'] = [
    '#type' => 'details',
    '#title' => t('Email Configuration'),
    '#open' => TRUE,
  ];
  $form['email_config']['email_wrapper_bg_color'] = [
    '#type' => 'textfield',
    '#title' => t('Wrapper Background Color'),
    '#default_value' => theme_get_setting('email_wrapper_bg_color'),
    '#description' => t('The HTML hex color used for the wrapping area around the email body.<br>Example: cccccc'),
    '#size' => 6,
    '#maxlength' => 6,
    '#field_prefix' => '#',
    '#attributes' => [
      'placeholder' => 'cccccc',
    ],
  ];
  $form['email_config']['email_footer_signature'] = [
    '#type' => 'textfield',
    '#title' => t('Footer Signature Text'),
    '#default_value' => theme_get_setting('email_footer_signature'),
    '#description' => t('Text that is displayed at the bottom of the email body.'),
    '#attributes' => [
      'placeholder' => t('From the Acro Media team.'),
    ],
  ];

  // Email Logo - Make the uploaded image permanent.
  $email_logo_image = theme_get_setting('site_logo');
  if (!empty($email_logo_image)) {
    $file = File::load($email_logo_image[0]);
    $file->status = FILE_STATUS_PERMANENT;
    $file->save();
    $file_usage = \Drupal::service('file.usage');
    $file_usage_check = $file_usage->listUsage($file);
    if (empty($file_usage_check)) {
      $file_usage->add($file, 'orange_starter', 'theme', $email_logo_image[0]);
    }
  }

  // User Dashboard.
  $form['user_dashboard'] = [
    '#type' => 'details',
    '#title' => t('User Dashboard'),
    '#description' => t('The page a user will see after logging in to the site.'),
    '#open' => TRUE,
  ];
  $form['user_dashboard']['footer_message'] = [
    '#type' => 'text_format',
    '#title' => t('Footer Message'),
    '#description' => t('A message that is displayed at the bottom of the dashboard.'),
    '#format' => 'html',
    '#default_value' => Markup::create(theme_get_setting('footer_message.value')),
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Adds template suggestions.
 */
function orange_starter_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  if ($node = \Drupal::request()->attributes->get('node')) {
    if ($node instanceof NodeInterface) {
      array_splice($suggestions, 1, 0, 'page__type__' . $node->getType());
    }
  }

  // Add taxonomy vocabulary suggestions.
  if ($term = \Drupal::request()->attributes->get('taxonomy_term')) {
    $vocabulary_id = $term->getVocabularyId();
    array_splice($suggestions, 1, 0, 'page__taxonomy__' . $term->getVocabularyId());
  }

  // Add page path alias suggestions.
  $page_current_path = \Drupal::service('path.current')->getPath();

  if (!empty($page_current_path)) {
    $page_current_alias = \Drupal::service('path.alias_manager')->getAliasByPath($page_current_path);
  }
  if (!empty($page_current_alias)) {
    $search_for = '/';
    $page_current_alias = str_replace('-', '_', $page_current_alias);
    $pos_page_current_alias = strpos($page_current_alias, $search_for);

    if ($pos_page_current_alias !== FALSE) {
      $page_current_alias_formatted = substr_replace($page_current_alias, '', $pos_page_current_alias, strlen($search_for));
      $page_current_alias_formatted = str_replace('/', '__', $page_current_alias_formatted);
    }
    if ($page_current_alias_formatted) {
      array_splice($suggestions, 1, 0, 'page__' . $page_current_alias_formatted);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Add body classes if certain regions have content.
 */
function orange_starter_preprocess_html(&$variables) {
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();

  // Page title variable.
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
  if ($title && is_string($title)) {
    $variables['page_title'] = $title;
  }

  // Current path variable.
  $current_path = \Drupal::service('path.current')->getPath();
  $variables['current_path'] = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

  // Taxonomy term variables.
  if ($term = \Drupal::request()->attributes->get('taxonomy_term')) {
    // Set variable for taxonomy term's vocabulary.
    $variables['term_vocabulary'] = $term->getVocabularyId();

    // Set variable for taxonomy term's name.
    $variables['term_name'] = $term->getName();
  }

  // User profile variable.
  if ($route_name && $route_name == 'entity.user.canonical') {
    $variables['user_profile'] = TRUE;
  }
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function orange_starter_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_theme_suggestions_alter() for blocks.
 */
function orange_starter_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $elements = $variables['elements'];

  if (isset($elements['content']['#block_content'])) {
    $bundle = $elements['content']['#block_content']->bundle();
    // Set suggestion based on block type.
    $suggestions[] = 'block__type__' . $bundle;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for inputs.
 */
function orange_starter_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  // Set suggestion for inputs within nested paragraphs.
  if (isset($element['#attributes']['data-paragraph-parent'])) {
    array_splice($suggestions, 1, 0, 'input__' . $element['#type'] . '__' . 'paragraph__parent' . '__' . $element['#attributes']['data-paragraph-parent']);
  }
  // Set suggestion for inputs within paragraphs.
  if (isset($element['#attributes']['data-paragraph'])) {
    array_splice($suggestions, 1, 0, 'input__' . $element['#type'] . '__' . 'paragraph' . '__' . $element['#attributes']['data-paragraph']);
  }
}

/**
 * Implements hook__preprocess_comment_HOOK() for Comments.
 */
function orange_starter_preprocess_comment(&$variables) {
  if (isset($variables['elements']['#comment'])) {
    $comment = $variables['elements']['#comment'];

    $variables['comment_type'] = $comment->bundle();

    $variables['created'] = t('@comment_date', [
      '@comment_date' => \Drupal::service('date.formatter')->format($comment->getCreatedTime(), 'custom', 'F j, Y')
    ]);
  }
}

/**
 * Implements hook_preprocess_node(&$variables).
 */
function orange_starter_preprocess_node(&$variables) {
  if (isset($variables['node'])) {
    $node = $variables['node'];

    // Base path variable.
    $variables['base_path'] = base_path();

    // Absolute path variable.
    $node_absolute_url = Url::fromRoute('entity.node.canonical', ['node' => $node->id()], ['absolute' => TRUE])->toString();
    $variables['absolute_path'] = $node_absolute_url;

    // Encoded fields for social media sharing.
    $node_absolute_encoded_url = urlencode($node_absolute_url);
    $variables['absolute_encoded_path'] = $node_absolute_encoded_url;

    $encoded_title = rawurlencode($node->title->value);
    $variables['encoded_title'] = $encoded_title;
  }
}

/**
 * Implements hook_preprocess_page(&$variables).
 */
function orange_starter_preprocess_page(&$variables) {
  // Load the site name out of configuration.
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');

  // Call route specific preprocess function.
  $variables['route_name'] = \Drupal::routeMatch()->getRouteName();
  $function = 'orange_starter_preprocess_page__' . str_replace('.', '_', $variables['route_name']);
  if (function_exists($function)) {
    $function($variables);
  }

  // Set variables from theme settings.
  $variables['copyright_name'] = theme_get_setting('copyright_name');
  $variables['facebook_url'] = theme_get_setting('facebook_url');
  $variables['twitter_url'] = theme_get_setting('twitter_url');
  $variables['instagram_url'] = theme_get_setting('instagram_url');
  $variables['youtube_url'] = theme_get_setting('youtube_url');
  $variables['linkedin_url'] = theme_get_setting('linkedin_url');
  $variables['pinterest_url'] = theme_get_setting('pinterest_url');
}

/**
 * Implements hook_preprocess_taxonomy_term(&$variables).
 */
function orange_starter_preprocess_taxonomy_term(&$variables) {
  if (isset($variables['term'])) {
    $term = $variables['term'];

    // Set base path variable since it's not available by default.
    $variables['base_path'] = base_path();
  }
}

/**
 * Implements hook_form_alter().
 */
function orange_starter_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Webforms.
  if ((isset($form['#entity_type'])) && ($form['#entity_type'] == 'webform_submission')) {
    $paragraph_matches = [];

    // Check for webforms within paragraphs.
    if (preg_match('/paragraph_([0-9]+)/', $form_id, $paragraph_matches)) {
      $paragraph_id = $paragraph_matches[1];
      $paragraph = Paragraph::load($paragraph_id);

      if ($paragraph = Paragraph::load($paragraph_id)) {
        $paragraph_type = $paragraph->bundle();

        // Set paragraph attribute.
        $form['actions']['submit']['#attributes']['data-paragraph'] = $paragraph_type;

        // Paragraph parent.
        if ($paragraph->parent_id->value) {
          $paragraph_parent_id = $paragraph->parent_id->value;

          if ($paragraph_parent = Paragraph::load($paragraph_parent_id)) {
            $paragraph_parent_type = $paragraph_parent->bundle();

            // Set paragraph parent attribute.
            $form['actions']['submit']['#attributes']['data-paragraph-parent'] = $paragraph_parent_type;
          }
        }
      }
    }
  }

  // Comment form.
  if ($form_id == 'comment_node_comment_form') {
    // Update submit button text.
    $form['actions']['submit']['#value'] = t('Post Comment');
  }

  // User Login form.
  if ($form_id == 'user_login_form') {
    // Make submit button the primary button.
    $form['actions']['submit']['#button_type'] = 'primary';

    // Remove autofocus from username input.
    unset($form['name']['#attributes']['autofocus']);
  }

  // User Reset Password form.
  if ($form_id == 'user_pass') {
    // Make submit button the primary button.
    $form['actions']['submit']['#button_type'] = 'primary';

    // Remove mail which was markup.
    // And assign new text to the name field description instead.
    $form['mail'] = [];
    $form['name']['#description'] = t('Password reset instructions will be sent to your registered email address.');

    // Remove autofocus from username input.
    unset($form['name']['#attributes']['autofocus']);
  }
}

/**
 * Implements hook_preprocess_input(&$variables).
 */
function orange_starter_preprocess_input(&$variables) {
  if (!isset($variables['element'])) {
    return;
  }

  $variables['type'] = $variables['element']['#type'] ?? NULL;
  $variables['button_type'] = $variables['element']['#button_type'] ?? NULL;
  $variables['element_id'] = $variables['element']['#attributes']['id'] ?? NULL;

  if (($variables['type'] ?? NULL) === 'submit') {
    $variables['value'] = $variables['element']['#value'];
  }
}

/**
 * Implements hook_theme_suggestions_form_element_alter().
 */
function orange_starter_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#name'])) {
    $suggestions[] = 'form_element__' . $element['#name'];
  }
  if (isset($element['#type'])) {
    $suggestions[] = 'form_element__type__' . $element['#type'];
  }
  if (isset($element['#form_id'])) {
    $suggestions[] = 'form_element__form_id__' . $element['#form_id'];
    $suggestions[] = 'form_element__' . $element['#form_id'] . '__' . $element['#type'];
  }
}

/**
 * Implements hook_preprocess_form_element(&$variables).
 */
function orange_starter_preprocess_form_element(&$variables) {
  $variables['label']['#attributes']['data-element-type'] = $variables['element']['#type'];

  if (isset($variables['element']['#id'])) {
    $variables['element_id'] = $variables['element']['#id'];
  }
  if (isset($variables['element']['#attributes']['class'])) {
    if ($variables['element']['#type'] == 'textarea' && in_array('js-text-full', $variables['element']['#attributes']['class'])) {
      $variables['is_js_text_widget'] = TRUE;
    }
  }
  if (isset($variables['element']['#allowed_formats'])) {
    if (in_array('html', $variables['element']['#allowed_formats'])) {
      $variables['is_js_text_widget'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_form_element_label(&$variables).
 */
function orange_starter_preprocess_form_element_label(&$variables) {
  if (isset($variables['element'])) {
    $variables['attributes'] = array_merge($variables['attributes'], $variables['element']['#attributes']);

    if (isset($variables['element']['#attributes']['data-element-type'])) {
      $variables['element_type'] = $variables['element']['#attributes']['data-element-type'];
    }
    if (isset($variables['element']['#id'])) {
      $variables['element_id'] = $variables['element']['#id'];
    }
  }
}

/**
 * Implements hook_preprocess_fieldset(&$variables).
 */
function orange_starter_preprocess_fieldset(&$variables) {
  if (isset($variables['element']['#type'])) {
    $variables['element_type'] = $variables['element']['#type'];
  }
}

/**
 * Implements hook_preprocess_swiftmailer(&$variables).
 */
function orange_starter_preprocess_swiftmailer(&$variables) {
  // Load the site name out of configuration.
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');

  $variables['base_path'] = base_path();
  $variables['site_path'] = Url::fromRoute('<front>', [], ['absolute' => TRUE])->toString();

  // Set variables from theme settings.
  $email_logo = theme_get_setting('site_logo');
  if (!empty($email_logo)) {
    $email_logo_file = File::load($email_logo[0]);

    if ($email_logo_image_style = ImageStyle::load('site_logo')) {
      $email_logo_url = $email_logo_image_style->buildUrl($email_logo_file->getFileUri());

      if ($email_logo_url) {
        $variables['email_logo_url'] = $email_logo_url;
      }
    }
  }
  $variables['email_wrapper_bg_color'] = theme_get_setting('email_wrapper_bg_color');
  $variables['email_footer_signature'] = theme_get_setting('email_footer_signature');
  $variables['copyright_name'] = theme_get_setting('copyright_name');
  $variables['facebook_url'] = theme_get_setting('facebook_url');
  $variables['twitter_url'] = theme_get_setting('twitter_url');
  $variables['instagram_url'] = theme_get_setting('instagram_url');
  $variables['youtube_url'] = theme_get_setting('youtube_url');
  $variables['linkedin_url'] = theme_get_setting('linkedin_url');
  $variables['pinterest_url'] = theme_get_setting('pinterest_url');
}

/**
 * Implements hook_preprocess_user(&$variables).
 */
function orange_starter_preprocess_user(&$variables) {
  $account = $variables['elements']['#user'];

  // Base path variable.
  $variables['base_path'] = base_path();

  // Set variables from theme settings.
  $variables['footer_message'] = Markup::create(theme_get_setting('footer_message.value'));
}

/**
 * Implements hook_preprocess_user(&$variables).
 */
function orange_starter_preprocess_username(&$variables) {
  $account = $variables['account'];

  if (isset($account->field_display_name->value)) {
    $variables['display_name'] = $account->field_display_name->value;
  }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function orange_starter_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // Set variables from theme settings.
  $site_logo = theme_get_setting('site_logo');
  if (!empty($site_logo)) {
    $site_logo_file = File::load($site_logo[0]);
    $site_logo_url = file_create_url($site_logo_file->getFileUri());

    if ($site_logo_url) {
      $variables['site_logo_url'] = $site_logo_url;
    }
  }
  $variables['copyright_name'] = theme_get_setting('copyright_name');
  $variables['facebook_url'] = theme_get_setting('facebook_url');
  $variables['twitter_url'] = theme_get_setting('twitter_url');
  $variables['instagram_url'] = theme_get_setting('instagram_url');
  $variables['youtube_url'] = theme_get_setting('youtube_url');
  $variables['linkedin_url'] = theme_get_setting('linkedin_url');
  $variables['pinterest_url'] = theme_get_setting('pinterest_url');
}

/**
 * Implements hook_preprocess_menu_local_task(&$variables).
 */
function orange_starter_preprocess_menu_local_task(&$variables) {
  $url = $variables['link']['#url'];
  if ($url instanceof Url && $url->getRouteName() == 'entity.user.canonical') {
    $variables['link']['#title'] = t('Dashboard');
  }
  if ($url instanceof Url && $url->getRouteName() == 'entity.user.edit_form') {
    $variables['link']['#title'] = t('Account details');
  }
}
